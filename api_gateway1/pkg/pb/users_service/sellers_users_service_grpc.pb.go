// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package users_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SellersUsersServiceClient is the client API for SellersUsersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SellersUsersServiceClient interface {
	SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*SignUpResponse, error)
	CompanyInfo(ctx context.Context, in *CompanyInfoRequest, opts ...grpc.CallOption) (*CompanyInfoResponse, error)
}

type sellersUsersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSellersUsersServiceClient(cc grpc.ClientConnInterface) SellersUsersServiceClient {
	return &sellersUsersServiceClient{cc}
}

func (c *sellersUsersServiceClient) SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*SignUpResponse, error) {
	out := new(SignUpResponse)
	err := c.cc.Invoke(ctx, "/protobuf.SellersUsersService/SignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellersUsersServiceClient) CompanyInfo(ctx context.Context, in *CompanyInfoRequest, opts ...grpc.CallOption) (*CompanyInfoResponse, error) {
	out := new(CompanyInfoResponse)
	err := c.cc.Invoke(ctx, "/protobuf.SellersUsersService/CompanyInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SellersUsersServiceServer is the server API for SellersUsersService service.
type SellersUsersServiceServer interface {
	SignUp(context.Context, *SignUpRequest) (*SignUpResponse, error)
	CompanyInfo(context.Context, *CompanyInfoRequest) (*CompanyInfoResponse, error)
}

// UnimplementedSellersUsersServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSellersUsersServiceServer struct {
}

func (*UnimplementedSellersUsersServiceServer) SignUp(context.Context, *SignUpRequest) (*SignUpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUp not implemented")
}
func (*UnimplementedSellersUsersServiceServer) CompanyInfo(context.Context, *CompanyInfoRequest) (*CompanyInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompanyInfo not implemented")
}

func RegisterSellersUsersServiceServer(s *grpc.Server, srv SellersUsersServiceServer) {
	s.RegisterService(&_SellersUsersService_serviceDesc, srv)
}

func _SellersUsersService_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellersUsersServiceServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.SellersUsersService/SignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellersUsersServiceServer).SignUp(ctx, req.(*SignUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellersUsersService_CompanyInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellersUsersServiceServer).CompanyInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.SellersUsersService/CompanyInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellersUsersServiceServer).CompanyInfo(ctx, req.(*CompanyInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SellersUsersService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.SellersUsersService",
	HandlerType: (*SellersUsersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignUp",
			Handler:    _SellersUsersService_SignUp_Handler,
		},
		{
			MethodName: "CompanyInfo",
			Handler:    _SellersUsersService_CompanyInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sellers_users_service.proto",
}
